#! /usr/bin/env python
#############################################################################
#
#              epmd
#
# File:        $Source: /home/d/work/personal/ticker-cvs/epm/epmd,v $
# Version:     $RCSfile: epmd,v $ $Revision: 1.3 $
#
# COPYRIGHT_BEGIN
#
# Copyright:   (C) 2001, David Arnold.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the following
#   disclaimer.
#
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the following
#   disclaimer in the documentation and/or other materials
#   provided with the distribution.
#
# * Neither the name of the DSTC nor the names
#   of its contributors may be used to endorse or promote
#   products derived from this software without specific prior
#   written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# COPYRIGHT_END
#############################################################################

import elvin, os, sha, socket, sys, time

########################################################################

RELEASE        = "0.3"
WAIT_TIME      = 20.0

GROUPS = None
URLS = None
SCOPE = None

########################################################################

class EPMDaemon:
    """

    This daemon acts as a proxy for individual presence clients,
    caching their most-recent Presence-Info, and, should they cease
    responding, answering Presence-Requests on their behalf.

    Presence-Info events can have four states: "online",
    "unavailable?", "unavailable", or "offline".  The implication of
    an "online" status is that the user is present, and available, in
    which case, you'd expect their presence client to respond on its
    own behalf.  Consequently, epmd never sends an "online" status,
    but will re-write the most-recent "online" response (if it was
    "online") as "unavailable?".

    """
    
    def __init__(self):
        """ """

        # initialise state
        self._urls = []           # URLs for Elvin routers
        self._scope = None        # Elvin router scope
        self._groups = []         # groups to monitor
        self._users = {}          # users and their status
        self._debug = 0           # do debug?

        # set proxy identifier
        self._proxy = "epmd %s / %s" % (RELEASE, socket.gethostname())
        
        # read config file, if there is one
        cfile = "%s/.epmd" % os.environ.get("HOME", "/")
        if os.path.exists(cfile):
            f = open(cfile)
            s = f.read()
            f.close()

            #fixme: naughty, naughty
            exec(s)

        if GROUPS:
            self._groups = GROUPS
        if URLS:
            self._urls = URLS
        if SCOPE:
            self._scope = SCOPE

        # parse command line args
        argv = sys.argv[1:]
        while len(argv):
            arg = argv.pop(0)

            if arg == "-e":
                self._urls.append(argv.pop(0))
            elif arg[:8] == "--elvin=":
                self._urls.append(arg[8:])

            elif arg == "-S":
                self._scope = argv.pop(0)
            elif arg[:8] == "--scope=":
                self._scope = arg[8:]

            elif arg == "-g":
                self._groups = argv.pop(0)
            elif arg[:9] == "--groups=":
                self._groups = arg[9:]

            elif arg in ("-d", "--debug"):
                self._debug = 1

            elif arg in ("-v", "--version"):
                print RELEASE
                sys.exit(0)

            elif arg in ("-h", "-H", "-?", "--help"):
                self.usage()
                sys.exit(0)
                
            else:
                self.usage()
                sys.exit(1)

        # search environment for undefined things
        if not self._urls and os.environ.has_key("ELVIN_URL"):
            self._urls.append(os.environ["ELVIN_URL"])

        if not self._urls and not self._scope and os.environ.has_key("ELVIN_SCOPE"):
            self._scope = os.environ["ELVIN_SCOPE"]

        # debugging: print args 
        if 0:
            print self._urls
            print self._scope
            print self._groups
            print self._debug
            print
            sys.exit(0)

        # daemonise (very cheaply!)
        if not self._debug:
            res = os.fork()
            if res:
                sys.exit(0)
            
        # connect to Elvin router
        self._client = elvin.client()
        self._elvin = self._client.connection()

        for url in self._urls:
            self._elvin.append_url(url)

        if self._scope:
            self._elvin.set_scope(scope)

        self._elvin.open()

        # subscribe
        self._rqst_sub = self._elvin.subscribe('require(Presence-Request)')
        self._rqst_sub.add_listener(self.handle_presence_rqst)
        self._rqst_sub.register()
        
        self._info_sub = self._elvin.subscribe('require(Presence-Info)')
        self._info_sub.add_listener(self.handle_presence_info)
        self._info_sub.register()
        
        # and run
        try:
            self._elvin.run()

        except KeyboardInterrupt:
            if self._debug: print "Exiting on SIGINT ..."
            self._elvin.close()
            self._client.close()
            sys.exit(0)
        return


    def handle_presence_rqst(self, sub, nfn, insec, rock):
        """Handle a request for a user's presence status."""

        for username in nfn["Users"][1:-1].split("|"):

            # lookup user record
            user = self._users.get(username)

            # do we know anything about this user?
            if not user:
                if self._debug:
                    print "    ignoring request for unknown user", username
                return

            # have we adopted them?
            if user._adopted:
                if self._debug: print "    advertising for adopted user", username
                user.advertise(nfn)
                return

            # start timer
            else:
                if self._debug: print "    starting timer for known user", username
                user._timeout = self._elvin.add_timeout(WAIT_TIME, user.adopt, nfn)

        return

        
    def handle_presence_info(self, sub, nfn, insec, rock):
        """Handle advertised presence info."""

        # if it's from a proxy, ignore it
        if nfn.has_key("Proxy-Agent"):
            return

        # if we already know about them, update
        if self._users.has_key(nfn["User"]):
            self._users[nfn["User"]].set(nfn)

        # otherwise, create a new user record
        else:
            self._users[nfn["User"]] = UserStatus(self, nfn)

        return


class UserStatus:

    def __init__(self, daemon, nfn):
        self._daemon = daemon
        self._info = {}
        self._adopted = 0
        self._timeout = None
        self._timestamp = 0.0
        
        self.set(nfn)
        return


    def set(self, nfn):
        """Update the properties of a known user."""

        # is this information more recent than what we have?
        timestamp = time.time() - float(nfn["Status-Duration"])
        if timestamp < self._timestamp:
            if self._daemon._debug:
                print "    ignoring old status for user ", self._info["User"]
            return

        # update stored info from this notification
        self._info.update(nfn._attrs)
        self._timestamp = timestamp
        if self._daemon._debug:
            print "    got update for user", self._info["User"]

        # if we have adopted this user, drop them again
        if self._adopted:
            if self._daemon._debug: print "*** spurning user", self._info["User"]
            self._adopted = 0

        # if we're still deciding whether to adopt them, stop it, and don't
        if self._timeout:
            if self._daemon._debug: print "    cancelling timer for user", nfn["User"]
            self._daemon._elvin.remove_timeout(self._timeout)
            self._timeout = None

        return


    def adopt(self, timeout, rock):
        """Handle timeout while waiting for response to request."""
        
        self._timeout = None
        if self._daemon._debug:
            print "*** adopting user", self._info["User"]

        self._adopted = 1
        self.advertise(rock)
        return


    def advertise(self, rqst):
        """Send the recorded status of the user."""

        m = elvin.message(self._info)

        # set response id
        m["Presence-Info"] = rqst["Presence-Request"]

        # set duration wrt current time
        m["Status-Duration"] = int(time.time() - self._timestamp)

        # flag this response as coming from a proxy
        m["Proxy-Agent"] = self._daemon._proxy

        # re-write "online" status 
        if m["Status"] == "online":
            m["Status"] = "unavailable?"

        # send notification
        self._daemon._elvin.notify(m)
        return


########################################################################

if __name__ == "__main__":
    EPMDaemon()
    

########################################################################
# Local Variables:
# mode: python
# End:
########################################################################
# end of epmd
